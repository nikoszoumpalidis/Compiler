/* *******************************************************************

* Program: Lectical and Syntactical analysis of Language:"Toy"										   

* Author:	Sofia Avgoustidou					1456                               
				Fedon Bouzbas						1527

* Usage: executable input.toy
		input.toy=File written in Toy language                                     

*             										                           

* File: syntax_2012.c                                                  

******************************************************************** */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct nexttoken{		
	int type;			// type of token read 
	char strval[82];	// stores only id or num
};

FILE *fp;				// file of a program in toy language

int T[11][20];				//transition table
struct nexttoken token;

/* functions used in lectical analysis		 									*/
void create_transition_table();
void checkbuflength(int, char [], int, int );
int check_reserved(char []);
static void lex();
/*===================================================================*/
/* functions used in syntactical analysis 									*/
void syntax();
void program();
void block();
void declarations();
void varlist();
void subprograms();
void procorfunc();
void funcbody();
void formalpars();
void formalparlist();
void formalparitem();
void sequence();
void brackets_seq();
void brack_or_stat();
void statement();
void assignment_stat();
void if_stat();
void elsepart();
void while_stat();
void for_stat();
void input_stat();
void print_stat();
void call_stat();
void actualpars();
void actualparlist();
void actualparitem();
void return_stat();
void condition();
void boolterm();
void boolfactor();
void expression();
void term();
void factor();
void relational_oper();
void add_oper();
void mul_oper();
void optional_sign();

/*===================================================================*/

static int line=1;		//global variable - stores line of character in toy file


/* possible tokens found in greeklish file and states						*/
enum tokens_and_states{
	lettertk,								// A...Z , a...z				0
	digittk,									// 0...9							1
	plustk,									//	+								2
	minustk,									// -								3
	multtk,									// *								4
	slashtk,									// / 								5
	colontk,									// :								6
	equaltk,									// =								7
	lowertk,									//	<								8
	greatertk,								// >								9	
	semicolontk,							// ;								10
	commatk,									// ,								11
	leftbrackettk,							// (								12
	rightbrackettk,						// )								13
	leftsquarebrackettk,					// [								14
	rightsquarebrackettk,				// ]								15
	leftcurlybrackettk,					// {								16
	rightcurlybrackettk,					// }								17
	eoftk,									//	eof							18
	othertk,									// other							19

	increasetk,								//	+=								20
	lowerequaltk,							// <=								21
	greaterequaltk,						// >=								22
	nonequaltk,								// <>								23
	assigntk,								// :=								24
	begincommenttk,						// /*								25
	endcommenttk,							// */								26

	programtk,								// program     				27
	inttk,									// int							28
	voidtk,									// void							29
	intk,										// in								30
	inouttk,									// inout							31
	calltk,									// call							32
	returntk,								// return						33	
	inputtk,									// input							34
	printtk,									// print							35
	iftk,										// if								36
	elsetk,									// else							37
	whiletk,									// while							38
	fortk,									// for							39
	nottk,									// not							40	
	andtk,									// and							41
	ortk,										// or								42

	numtk,									//									43
	idtk,										// 								44


	state0=0,									// read new symbol
	state1=1,									// a letter has been read
	state2=2,									//	a digit has been read
	state3=3,									// a + has been read
	state4=4,									//	a * has been read
	state5=5,									//	a : has been read
	state6=6,									//	a < has been read
	state7=7,									// a > has been read
	state8=8,									// a \ has been read
	state9=9,									// a \ and a * has been read
	state10=10,									// in \* state , a * has been read

	OK=-1,
	error=-2
};

/*==========================================================*/
/* Lexical analysis 														*/
void create_transition_table(){
	int i;

	T[state0][lettertk]=state1;
	T[state0][digittk]=state2;
	T[state0][plustk]=state3;
	T[state0][minustk]=OK;
	T[state0][multtk]=state4;
	T[state0][slashtk]=state8;
	T[state0][colontk]=state5;
	T[state0][equaltk]=OK;
	T[state0][lowertk]=state6;
	T[state0][greatertk]=state7;
	for(i=10;i<=17;i++)
		T[state0][i]=OK;
	T[state0][eoftk]=OK;
	T[state0][othertk]=error;

	for(i=0;i<=1;i++)
		T[state1][i]=state1;
	for(i=2;i<=19;i++)
		T[state1][i]=OK;

	T[state2][lettertk]=OK;
	T[state2][digittk]=state2;
	for(i=2;i<=19;i++)
		T[state2][i]=OK;

	for(i=0;i<=19;i++)
		T[state3][i]=OK;

	for(i=0;i<=4;i++)
		T[state4][i]=OK;
	T[state4][slashtk]=error;
	for(i=6;i<=19;i++)
		T[state4][i]=OK;

	for(i=0;i<=6;i++)
		T[state5][i]=error;
	T[state5][equaltk]=OK;
	for(i=8;i<=19;i++)
		T[state5][i]=error;
	
	for(i=0;i<=19;i++)
		T[state6][i]=OK;

	for(i=0;i<=19;i++)
		T[state7][i]=OK;

	for(i=0;i<=3;i++)
		T[state8][i]=OK;
	T[state8][multtk]=state9;
	for(i=5;i<=19;i++)
		T[state8][i]=OK;
	
	for(i=0;i<=3;i++)
		T[state9][i]=state9;
	T[state9][multtk]=state10;
	for(i=5;i<=17;i++)
		T[state9][i]=state9;
	T[state9][eoftk]=error;
	T[state9][othertk]=state9;
	
	for(i=0;i<=4;i++)
		T[state10][i]=state9;
	T[state10][slashtk]=state0;
	for(i=6;i<=17;i++)
		T[state10][i]=state9;
	T[state10][eoftk]=error;
	T[state10][othertk]=state9;
	
}

void checkbuflength(int state, char buf[], int pos, int line){
	
	if(state==state1){
		buf[pos]='\0';
		if(strlen(buf)>30){
			printf("Line %d :: Warning: \"%s\" is too long (max length = 30 characters)\n", line, buf);
			buf[30]='\0';		
		}
		else{
			return;
		}
	}
	else if(state==state2){
		buf[pos]='\0';
		if(atoi(buf)<-32767 || atoi(buf)>32767){
			printf("Line %d :: Error: \"%s\" is out of limits (number must be between -32767 and 32767)\n", line, buf);
			exit(0);
		}
		else{
			return;
		}
	}
}

int check_reserved(char token[]){
		
	if(strcmp(token,"program")==0)
		return(programtk);
	else if(strcmp(token,"int")==0)
		return(inttk);
	else if(strcmp(token,"void")==0)
		return(voidtk);
	else if(strcmp(token,"in")==0)
		return(intk);
	else if(strcmp(token,"inout")==0)
		return(inouttk);
	else if(strcmp(token,"call")==0)
		return(calltk);
	else if(strcmp(token,"return")==0)
		return(returntk);
	else if(strcmp(token,"input")==0)
		return(inputtk);
	else if(strcmp(token,"print")==0)
		return(printtk);
	else if(strcmp(token,"if")==0)
		return(iftk);
	else if(strcmp(token,"else")==0)
		return(elsetk);
	else if(strcmp(token,"while")==0)
		return(whiletk);
	else if(strcmp(token,"for")==0)
		return(fortk);
 	else if(strcmp(token,"not")==0)
		return(nottk);
	else if(strcmp(token,"and")==0)
		return(andtk);
	else if(strcmp(token,"or")==0)
		return(ortk);
	else
		return(idtk);
}

static void lex(){
	char ch;															// character read from file
	char buf[81];
	int pos=0;														// current position of buffer
	int state;														// current state

	state=state0;													// lex always starts from state0
	while(state>=0){
		ch=getc(fp);												// get next character in file
		if(state==0)
			while(ch==' '){										// ignore spaces
				ch=getc(fp);
		}
		if(state==state0 || state==state9 || state==state10){
			while(ch=='\n' || ch=='\t'){						// ignore whitespaces only in certain states
				if(ch=='\n'){
					line++;											// change line when a break line occurs
				}
				ch=getc(fp);
				while(state==state0 && ch==' '){				// case break line and then whitespace occurs
					ch=getc(fp);
				}
			}
		}

		switch(ch){
			case 'A': case 'B': case 'C': case 'D':
			case 'E': case 'F': case 'G': case 'H':
			case 'I': case 'J': case 'K': case 'L':
			case 'M': case 'N': case 'O': case 'P':
			case 'Q': case 'R': case 'S': case 'T':
			case 'U': case 'V': case 'W': case 'X':
			case 'Y': case 'Z': case 'a': case 'b':
			case 'c': case 'd': case 'e': case 'f':
			case 'g': case 'h': case 'i': case 'j':
			case 'k': case 'l': case 'm': case 'n':
			case 'o': case 'p': case 'q': case 'r':
			case 's': case 't': case 'u': case 'v':
			case 'w': case 'x': case 'y': case 'z':
				if(state==state0 || state==state1){				
					buf[pos++]=ch;						
				}
				else if(state==state2){
					ungetc(ch,fp);										// unget a character back to file
					token.type=numtk;
					buf[pos]='\0';
					checkbuflength(state,buf,pos,line);
					strcpy(token.strval,buf);
				}
				else if(state==state3){
					ungetc(ch,fp);
					token.type=plustk;
				}
				else if(state==state4){
					ungetc(ch,fp);
					token.type=multtk;
				}
				else if(state==state6){
					ungetc(ch,fp);
					token.type=lowertk;
				}
				else if(state==state7){
					ungetc(ch,fp);
					token.type=greatertk;
				}
	
				else if(state==state5){
					ungetc(ch,fp);
					printf("Line %d :: Error: Unknown character \":\"\n", line);
					exit(0);
				}
				else if(state==state8){
					ungetc(ch,fp);
					token.type=slashtk;
				}	

				state=T[state][lettertk];
			break;
			case '0': case '1': case '2': case '3':
			case '4': case '5': case '6': case '7':
			case '8': case '9':
				if(state==state0 || state==state1 || state==state2){
					buf[pos++]=ch;
				}
				else if(state==state3){
					ungetc(ch,fp);
					token.type=plustk;
				}
				else if(state==state4){
					ungetc(ch,fp);
					token.type=multtk;
				}
				else if(state==state6){
					ungetc(ch,fp);
					token.type=lowertk;
				}
				else if(state==state7){
					ungetc(ch,fp);
					token.type=greatertk;
				}

				else if(state==state5){
					ungetc(ch,fp);
					printf("Line %d :: Error: Unknown character \":\"\n", line);
					exit(0);
				}
				else if(state==state8){
					ungetc(ch,fp);
					token.type=slashtk;
				}

				state=T[state][digittk];
			break;
			case '+': case '-': case '*': case '/':
			case '=': case ':': case '<': case '>':
			case ';': case ',': case '(': case ')':
			case '[': case ']': case '{': case '}':
				if(state==state0){
					if(ch=='-')
						token.type=minustk;
					else if(ch=='=')
						token.type=equaltk;
					else if(ch==';')
						token.type=semicolontk;
					else if(ch==',')
						token.type=commatk;
					else if(ch=='(')
						token.type=leftbrackettk;
					else if(ch==')')
						token.type=rightbrackettk;
					else if(ch=='[')
						token.type=leftsquarebrackettk;
					else if(ch==']')
						token.type=rightsquarebrackettk;
					else if(ch=='{')
						token.type=leftcurlybrackettk;
					else if(ch=='}')
						token.type=rightcurlybrackettk;
				}
				else if(state==state1){
					ungetc(ch,fp);
					buf[pos]='\0';
					checkbuflength(state,buf,pos,line);
					token.type=check_reserved(buf);
					if(token.type==idtk){
						strcpy(token.strval,buf);
					}
					return;
				}
				else if(state==state2){
					ungetc(ch,fp);
					token.type=numtk;
					buf[pos]='\0';
					checkbuflength(state,buf,pos,line);
					strcpy(token.strval,buf);
					return;
				}
				else if(state==state3){
					if(ch=='=')
						token.type=increasetk;
					else{
						ungetc(ch,fp);
						token.type=plustk;
						return;
					}	
				}
				else if(state==state4){
					if(ch!='/')
						token.type=multtk;
					else{
						printf("Line %d :: Error: Unexpected \"*/\" token\n", line);
						exit(0);
						return;
					}	
				}
				else if(state==state5){
					if(ch=='=')
						token.type=assigntk;
					else{
						ungetc(ch,fp);
						printf("Line %d :: Error: Unknown character \":\"\n", line);
						exit(0);
						return;
					}
				}
				else if(state==state6){
					if(ch=='=')
						token.type=lowerequaltk;
					else if(ch=='>')
						token.type=nonequaltk;
					else{					
						ungetc(ch,fp);
						token.type=lowertk;
						return;
					}
				}
				else if(state==state7){
					if(ch=='=')
						token.type=greaterequaltk;
					else{
						ungetc(ch,fp);
						token.type=greatertk;
						return;
					}				
				}
				else if(state==state8){
					if(ch!='*'){
						ungetc(ch,fp);
						token.type=slashtk;
						return;
					}
				}						
				
				if(ch=='+')
					state=T[state][plustk];
				else if(ch=='-')
					state=T[state][minustk];
				else if(ch=='*')
					state=T[state][multtk];
				else if(ch=='/')
					state=T[state][slashtk];
				else if(ch=='=')
					state=T[state][equaltk];
				else if(ch==':')
					state=T[state][colontk];
				else if(ch=='<')
					state=T[state][lowertk];
				else if(ch=='>')
					state=T[state][greatertk];
				else if(ch==';')
					state=T[state][semicolontk];
				else if(ch==',')
					state=T[state][commatk];
				else if(ch=='(')
					state=T[state][leftbrackettk];
				else if(ch==')')
					state=T[state][rightbrackettk];
				else if(ch=='[')
					state=T[state][leftsquarebrackettk];
				else if(ch==']')
					state=T[state][rightsquarebrackettk];
				else if(ch=='{')
					state=T[state][leftcurlybrackettk];
				else if(ch=='}')
					state=T[state][rightcurlybrackettk];
				else
					state=state0;
			break;
			case EOF:
				if(state==state0)
					token.type=eoftk;
				else if(state==state1){
					ungetc(ch,fp);
					buf[pos]='\0';
					checkbuflength(state,buf,pos,line);
					token.type=check_reserved(buf);
					if(token.type==idtk){
						strcpy(token.strval,buf);
					}
				}
				else if(state==state2){
					ungetc(ch,fp);
					token.type=numtk;
					buf[pos]='\0';
					checkbuflength(state,buf,pos,line);
					strcpy(token.strval,buf);
				}
				else if(state==state3){
					ungetc(ch,fp);
					token.type=plustk;
				}
				else if(state==state4){
					ungetc(ch,fp);
					token.type=multtk;
				}
				else if(state==state6){			
					ungetc(ch,fp);
					token.type=lowertk;
				}
				else if(state==state7){
					ungetc(ch,fp);
					token.type=greatertk;			
				}
				
				else if(state==state5){
					ungetc(ch,fp);
					printf("Line %d :: Error: Unknown character \":\"\n", line);
					exit(0);
				}
				else if(state==state8){
					ungetc(ch,fp);
					token.type=slashtk;
				}
				else if(state==state9 || state==state10){
					ungetc(ch,fp);
					printf("Line %d :: Error: Expected \"*/\"\n", line);
					exit(0);
				}
				state=T[state][eoftk];
			break;
			default:
				if(state==state1){
					ungetc(ch,fp);
					buf[pos]='\0';
					checkbuflength(state,buf,pos,line);
					token.type=check_reserved(buf);
					if(token.type==idtk){
						strcpy(token.strval,buf);
					}
					return;
				}
				else if(state==state2){
					ungetc(ch,fp);
					token.type=numtk;
					buf[pos]='\0';
					checkbuflength(state,buf,pos,line);
					strcpy(token.strval,buf);
					return;
				}
				else if(state==state3){
					ungetc(ch,fp);
					token.type=plustk;
					return;
				}
				else if(state==state4){
					ungetc(ch,fp);
					token.type=multtk;
					return;
				}
				else if(state==state6){			
					ungetc(ch,fp);
					token.type=lowertk;
					return;
				}
				else if(state==state7){
					ungetc(ch,fp);
					token.type=greatertk;
					return;	
				}

				else if(state==state0){
					ungetc(ch,fp);
					printf("Line %d :: Error: Unknown character \"%c\"\n", line, ch);
					exit(0);
					return;
				}
				else if(state==state5){
					ungetc(ch,fp);
					printf("Line %d :: Error: Unknown character \":\"\n", line);
					exit(0);
					return;
				}
				else if(state==state8){
					ungetc(ch,fp);
					printf("Line %d :: Error: Unknown character \"/\"\n", line);
					exit(0);
					return;
				}

				state=T[state][othertk];
			break;
		}
	}
	
	if(state==OK)
		return;
	else if(state==error){
		exit(0);
	}
}

/*==========================================================*/
/* Syntactical analysis													*/
void syntax(){
	lex();
	program();
}

void program(){
	printf("program()\n"); //
	if(token.type==programtk){
		lex();
		if(token.type==idtk){
			lex();
			block();
		}
		else{							// no ID
			printf("Line %d :: Error: Expected ID after program\n", line);
			exit(0);
		}		
	}
	else{								// no program
		printf("Line %d :: Error: A toy file must begin with \"program\"\n", line);
		exit(0);
	}
}

void block(){
	printf("block()\n"); //
	if(token.type==leftcurlybrackettk){
		lex();
		declarations();
		subprograms();
		sequence();
		if(token.type==rightcurlybrackettk){
			lex();
		}
		else{							// no '}'
			printf("Line %d :: Error: Expected '}' at the end of the block\n", line);
			exit(0);
		}
	}
	else{								// no '{'
		printf("Line %d :: Error: Expected '{' at the beginning of the block\n", line);
		exit(0);
	}
}

void declarations(){
	printf("declerations()\n"); //
	if(token.type==inttk){
		lex();
		varlist();
		if(token.type==semicolontk){
			lex();
		}
		else{							// no ';'
			printf("Line %d :: Error: Expected ';' at the end of variables declarations\n", line);
			exit(0);
		}
	}
}

void varlist(){
	printf("varlist()\n"); //
	if(token.type==idtk){
		lex();
		while(token.type==commatk){
			lex();
			if(token.type==idtk){
				lex();
			}
			else{						// no id after ','
				printf("Line %d :: Error: Expected ID after ',' at the variables declarations\n", line);
				exit(0);
			}
		}
	}
}

void subprograms(){
	printf("subprograms()\n"); //
	while(token.type==voidtk || token.type==inttk){
		procorfunc();
	}
}

void procorfunc(){
	printf("procorfunc()\n"); //
	if(token.type==voidtk){
		lex();
		if(token.type==idtk){
			lex();
			funcbody();
		}
		else{							// no id after "void"
			printf("Line %d :: Error: Expected ID after process declaration\n", line);
			exit(0);
		}
	}
	else if(token.type==inttk){
		lex();
		if(token.type==idtk){
			lex();
			funcbody();
		}
		else{							// no id after "int"
			printf("Line %d :: Error: Expected ID after function declaration\n", line);
			exit(0);
		}
	}
	else{								// no "void" or "int"
		printf("Line %d :: Error: Expected process or function declaration\n", line);
		exit(0);
	}
}

void funcbody(){
	printf("funcbody()\n"); //
	formalpars();
	block();
}

void formalpars(){
	printf("formalpars()\n"); //
	if(token.type==leftbrackettk){
		lex();
		if(token.type==intk || token.type==inouttk){
			formalparlist();
		}
		if(token.type==rightbrackettk){
			lex();
		}
		else{							// no ')'
			printf("Line %d :: Error: Expected ')' at the end of the parameter list\n", line);
			exit(0);
		}
	}
	else{								// no '('
		printf("Line %d :: Error: Expected '(' at the beginning of the parameter list\n", line);
		exit(0);
	}
}

void formalparlist(){
	printf("formalparlist()\n"); //
	formalparitem();
	while(token.type==commatk){
		lex();
		if(token.type==intk || token.type==inouttk)
			formalparitem();
		else{							// no "in" or "inout"
			printf("Line %d :: Error: Unexpected ',' in the parameter list\n", line);
			exit(0);
		}
	}
}

void formalparitem(){
	printf("formalparitem()\n"); //
	if(token.type==intk || token.type==inouttk){
		lex();
		if(token.type==idtk){
			lex();
		}
		else{							// no "id"
			printf("Line %d :: Error: Expected parameter in the parameter list\n", line);
			exit(0);
		}
	}
	else{								// no "in" or "inout"
		printf("Line %d :: Error: Unexpected \"in\" or \"inout\" in the parameter list\n", line);
		exit(0);
	}
}

void sequence(){
	printf("sequence()\n"); //
	statement();
	while(token.type==semicolontk){
		lex();
		statement();
	}
}

void brackets_seq(){
	printf("brackets_seq()\n"); //
	if(token.type==leftcurlybrackettk){
		lex();
		sequence();
		if(token.type==rightcurlybrackettk){
			lex();
		}
		else{							// no '}'
			printf("Line %d :: Error: Expected '}' at the end of the sequence\n", line);
			exit(0);
		}
	}
	else{								// no '{'
		printf("Line %d :: Error: Expected '{' at the beginning of the sequence\n", line);
		exit(0);
	}
}

void brack_or_stat(){
	printf("brack_or_stat()\n"); //
	if(token.type==leftcurlybrackettk){
		brackets_seq();
	}
	else{
		statement();
	}
}

void statement(){
	printf("statement()\n"); //
	if(token.type==idtk){
		assignment_stat();
	}
	else if(token.type==iftk){
		if_stat();
	}
	else if(token.type==whiletk){
		while_stat();
	}
	else if(token.type==fortk){
		for_stat();
	}
	else if(token.type==inputtk){
		input_stat();
	}
	else if(token.type==printtk){
		print_stat();
	}
	else if(token.type==calltk){
		call_stat();
	}
	else if(token.type==returntk){
		return_stat();
	}
}

void assignment_stat(){
	printf("assignement_stat()\n"); //
	if(token.type==idtk){
		lex();
		if(token.type==assigntk){
			lex();
			expression();
		}
		else{								// no ':='
			printf("Line %d :: Error: Expected ':=' at the assignment of ID\n", line);
			exit(0);
		}
	}
	else{									// no ID
		printf("Line %d :: Error: Expected ID at the assignment statement\n", line);
		exit(0);
	}
}

void if_stat(){
	printf("if_stat()\n"); //
	if(token.type==iftk){
		lex();
		if(token.type==leftbrackettk){
			lex();
			condition();
			if(token.type==rightbrackettk){
				lex();
				brack_or_stat();
				elsepart();
			}
			else{							// no ')'
				printf("Line %d :: Error: Expected ')' at the end of the condition in if statement\n", line);
				exit(0);
			}
		}
		else{								// no '('
			printf("Line %d :: Error: Expected '(' at the beginning of the condition in if statement\n", line);
			exit(0);
		}
	}
	else{									// no "if"
		printf("Line %d :: Error: If statement must begin with \"if\"\n", line);
		exit(0);
	}
}

void elsepart(){
	printf("elsepart()\n"); //
	printf("%d\n", token.type);
	if(token.type==elsetk){
		lex();
		printf("2 - %d\n", token.type);
		brack_or_stat();
	}
}

void while_stat(){
	printf("while_stat()\n"); //
	if(token.type==whiletk){
		lex();
		if(token.type==leftbrackettk){
			lex();
			condition();
			if(token.type==rightbrackettk){
				lex();
				brack_or_stat();
			}
			else{							// no ')'
				printf("Line %d :: Error: Expected ')' at the end of the condition in while statement\n", line);
				exit(0);
			}
		}
		else{								// no '('
			printf("Line %d :: Error: Expected '(' at the beginning of the condition in while statement\n", line);
			exit(0);
		}	
	}
	else{									// no "while"
		printf("Line %d :: Error: While statement must begin with \"while\"\n", line);
		exit(0);
	}
}

void for_stat(){
	printf("for_stat()\n"); //
	if(token.type==fortk){
		lex();
		if(token.type==leftbrackettk){
			lex();
			if(token.type==idtk){
				lex();
				if(token.type==assigntk){
					lex();
					expression();
					if(token.type==semicolontk){
						lex();
						condition();
						if(token.type==semicolontk){
							lex();
							if(token.type==idtk){
								lex();
								if(token.type==increasetk){
									lex();
									if(token.type==numtk){
										lex();
										if(token.type==rightbrackettk){
											lex();
											brack_or_stat();
										}
										else{		// no ')'
											printf("Line %d :: Error: Expected ')' at the end of for statement\n", line);
											exit(0);
										}	
									}
									else{			// no CONSTANT
										printf("Line %d :: Error: Expected constant in the step at the incremental expression of for statement\n", line);
										exit(0);
									}
								}
								else{				// no '+='
									printf("Line %d :: Error: Expected '+=' at the incremental expression of for statement\n", line);
									exit(0);
								}
							}
							else{					// no ID at the increment expression
								printf("Line %d :: Error: Expected ID at the incremental expression of for statement\n", line);
								exit(0);
							}
						}
						else{						// no second ';'
							printf("Line %d :: Error: Expected ';' at the end of loop condition of for statement\n", line);
							exit(0);
						}
					}
					else{							// no first ';'
						printf("Line %d :: Error: Expected ';' at the end of initialize expression of for statement\n", line);
						exit(0);
					}
				}
				else{								// no ':=' at the initialize expression
					printf("Line %d :: Error: Expected ':=' at the initialize expression of for statement\n", line);
					exit(0);
				}
			}
			else{									// no ID at the initialize expression
				printf("Line %d :: Error: Expected ID at the initialize expression of for statement\n", line);
				exit(0);
			}
		}
		else{										// no '('
			printf("Line %d :: Error: Expected '(' at the beginning of for statement\n", line);
			exit(0);
		}
	}
	else{											// no "for"
		printf("Line %d :: Error: For statement must begin with \"for\"\n", line);
		exit(0);
	}
}

void input_stat(){
	printf("input_stat()\n"); //
	if(token.type==inputtk){
		lex();
		if(token.type==leftbrackettk){
			lex();
			if(token.type==idtk){
				lex();
				if(token.type==rightbrackettk){
					lex();
				}
				else{								// no ')'
					printf("Line %d :: Error: Expected ')' at the end of input statement\n", line);
					exit(0);
				}
			}
			else{									// no ID
				printf("Line %d :: Error: Expected ID at the input statement\n", line);
				exit(0);
			}
		}
		else{										// no '('
			printf("Line %d :: Error: Expected '(' at the beginning of input statement\n", line);
			exit(0);
		}	
	}
	else{											// no "input"
		printf("Line %d :: Error: Input statement must begin with \"input\"\n", line);
		exit(0);
	}
}

void print_stat(){
	printf("print_stat()\n"); //
	if(token.type==printtk){
		lex();
		if(token.type==leftbrackettk){
			lex();
			expression();
			if(token.type==rightbrackettk){
				lex();
			}
			else{									// no ')'
				printf("Line %d :: Error: Expected ')' at the end of print statement\n", line);
				exit(0);
			}
		}
		else{										// no '('
			printf("Line %d :: Error: Expected '(' at the beginning of print statement\n", line);
			exit(0);
		}	
	}
	else{											// no "print"
		printf("Line %d :: Error: Print statement must begin with \"print\"\n", line);
		exit(0);
	}
}

void call_stat(){
	printf("call_stat()\n"); //
	if(token.type==calltk){
		lex();
		if(token.type==idtk){
			lex();
			actualpars();
		}
		else{										//no ID 
				printf("Line %d :: Error: Expected ID at the call statement\n", line);
				exit(0);
		}
	}
	else{											//no "call"
			printf("Line %d :: Error: Call statement must begin with \"call\"\n", line);
			exit(0);
	}
}

void actualpars(){
	printf("actualpars()\n"); //
	if(token.type==leftbrackettk){
		lex();
		actualparlist();
		if(token.type==rightbrackettk){
			lex();
		}
		else{									//no ')'
			printf("Line %d :: Error: Expected ')' at the end of the parameter list\n", line);		
			exit(0);
		}
	}
}

void actualparlist(){
	printf("actualparlist()\n"); //
	actualparitem();
	while(token.type==commatk){
		lex();
		if(token.type==intk || token.type==inouttk)
			actualparitem();
		else{							// no "in" or "inout"
			printf("Line %d :: Error: Unexpected ',' in the parameter list\n", line);
			exit(0);
		}
	}	
}

void actualparitem(){
	printf("actualparitem()\n"); //
	if(token.type==intk){
		lex();
		expression();
	}
	else if(token.type==inouttk){
		lex();
		if(token.type==idtk){
			lex();
		}
		else{							// no "id"
			printf("Line %d :: Error: Expected ID in the parameter list\n", line);
			exit(0);
		}
	}
	else{								// no "in" or "inout"
		printf("Line %d :: Error: Expected \"in\" or \"inout\" in the parameter list\n", line);
		exit(0);
	}
}

void return_stat(){
	printf("return_stat()\n"); //
	if(token.type==returntk){
		lex();
		if(token.type==leftbrackettk){
			lex();
			expression();
			if(token.type==rightbrackettk){
				lex();
			}
			else{							// no ')'
				printf("Line %d :: Error: Expected ')' at the end of return statement\n", line);
				exit(0);
			}
		}
		else{								// no '('
			printf("Line %d :: Error: Expected '(' at the beginning of return statement\n", line);
			exit(0);
		}
	}
	else{									// no "return"
		printf("Line %d :: Error: Return statement must begin with \"return\"\n", line);
		exit(0);
	}
}

void condition(){	
	printf("condition()\n"); //		
	boolterm();
	while(token.type==ortk){
		lex();
		boolterm();
	}	
}

void boolterm(){		
	printf("boolterm()\n"); //											
	boolfactor();
	while(token.type==andtk){
		lex();
		boolfactor();
	}	
}

void boolfactor(){
	printf("boolfactor()\n"); //
	if(token.type==nottk){
		lex();
		if(token.type==leftsquarebrackettk){
			lex();
			condition();
			if(token.type==rightsquarebrackettk){
				lex();
			}
			else{									// no ']'
				printf("Line %d :: Error: Expected ']' at the end of condition \n", line);
				exit(0);
			}
		}
		else{									// no '['
				printf("Line %d :: Error: Expected '[' at the beginning of condition \n", line);
				exit(0);
		}
	}
	else if(token.type==leftsquarebrackettk){
		lex();
		condition();
		if(token.type==rightsquarebrackettk){
			lex();
		}
		else{									// no ']'
			printf("Line %d :: Error: Expected ']' at the end of condition \n", line);
			exit(0);
		}
	}
	else{
		expression();
		relational_oper();
		expression();
	}	
}

void expression(){
	printf("expression()\n"); //
	optional_sign();
	term();
	while(token.type==plustk ||token.type==minustk){
		add_oper();
		term();
	}
}

void term(){
	printf("term()\n"); //
	factor();
	while(token.type==multtk ||token.type==slashtk){
		mul_oper();
		factor();
	}
}

void factor(){
	printf("factor()\n"); //
	if(token.type==leftbrackettk){
		lex();
		expression();
		if(token.type==rightbrackettk){
			lex();
		}
		else{							// no ')'
			printf("Line %d :: Error: Expected ')' at the end of expression \n", line);
			exit(0);
		}
	}
	else if(token.type==idtk){
		lex();
		actualpars();
	}
	else if(token.type==numtk){
		lex();
	}
	else{ 						// no ID or constant or expression
		printf("Line %d :: Error: Expected constant or ID or expression\n", line);
		exit(0);
	}
}

void relational_oper(){
	printf("relational_oper()\n"); //
	if(token.type==equaltk)
		lex();
	else if(token.type==lowertk)
		lex();
	else if(token.type==lowerequaltk)
		lex();
	else if(token.type==nonequaltk)
		lex();
	else if(token.type==greatertk)
		lex();
	else if(token.type==greaterequaltk)
		lex();
	else{								// no '='or '<' or '>' or '<=' or '>=' or '<>' 
		printf("Line %d :: Error: Expected  \"=\", \"<\", \">\", \" <=\", \">=\" or \"<>\" token\n", line);
		exit(0);
	}	
}

void add_oper(){
	printf("add_oper()\n"); //
	if(token.type==plustk){
		lex();
	}
	else if(token.type==minustk){
		lex();
	}
	else{						//no '+' or '-'
		printf("Line %d :: Error: Expected  \"+\" or \"-\" token\n", line);
		exit(0);
	}
}

void mul_oper(){
	printf("mul_oper()\n"); //
	if(token.type==multtk)
		lex();
	else if(token.type==slashtk)
		lex();
	else{							//no '*' or '/'
		printf("Line %d :: Error: Expected  \"*\" or \"/\" token\n", line);
		exit(0);
	}
}

void optional_sign(){
	printf("optional_sign()\n"); //
	if(token.type==plustk || token.type==minustk)
		add_oper();
}

/*==========================================================*/
/* Help Function for lectical analysis.							*
 *	Prints lectical units found by lex.								*
 *	In order to use it, enable print_enums(token.type); 		*
 *	in main.																	*/

void print_enums(int type){
	switch (type){
		case plustk:
			printf("\t+\n");
		break;
		case minustk:
			printf("\t-\n");
		break; 
		case multtk:
			printf("\t*\n");
		break; 
		case slashtk:
			printf("\t/\n");
		break;
		case equaltk:
			printf("\t=\n");
		break; 
		case lowertk:
			printf("\t<\n");
		break; 
		case greatertk:
			printf("\t>\n");
		break; 
		case semicolontk:
			printf("\t;\n");
		break; 
		case commatk:
			printf("\t,\n");
		break; 
		case leftbrackettk:
			printf("\t(\n");
		break; 
		case rightbrackettk:
			printf("\t)\n");
		break; 
		case leftsquarebrackettk:
			printf("\t[\n");
		break; 
		case rightsquarebrackettk:
			printf("\t]\n");
		break; 
		case leftcurlybrackettk:
			printf("\t{\n");
		break; 
		case rightcurlybrackettk:
			printf("\t}\n");
		break;
		case increasetk:
			printf("\t+\n");
		break; 
		case lowerequaltk:
			printf("\t+=\n");
		break;
		case greaterequaltk:
			printf("\t>=\n");
		break; 
		case nonequaltk:
			printf("\t<>\n");
		break; 
		case assigntk:
			printf("\t:=\n");
		break; 
		case begincommenttk:
			printf("\t/*\n");
		break; 
		case endcommenttk:
			printf("\t*/\n");
		break; 
		case programtk:
			printf("\tprogram\n");
		break; 
		case inttk:
			printf("\tint\n");
		break; 
		case voidtk:
			printf("\tvoid\n");
		break; 
		case intk:
			printf("\tin\n");
		break; 
		case inouttk:
			printf("\tinout\n");
		break; 
		case calltk:
			printf("\tcall\n");
		break; 
		case returntk:
			printf("\treturn\n");
		break; 
		case inputtk:
			printf("\tinput\n");
		break; 
		case printtk:
			printf("\tprint\n");
		break; 
		case iftk:
			printf("\tif\n");
		break; 
		case elsetk:
			printf("\telse\n");
		break; 
		case whiletk:
			printf("\twhile\n");
		break; 
		case fortk:
			printf("\tfor\n");
		break; 
		case nottk:
			printf("\tnot\n");
		break; 
		case andtk:
			printf("\tand\n");
		break; 
		case ortk:
			printf("\tor\n");
		break; 
	}
}

/*==========================================================*/

int main(int argc, char* argv[]){
	/*int i, j;*/
	char fpname[256];

	if(argc != 2) {
		if(argc==1){
		   printf("toy: No input files\n");
		}
		else{
			printf("toy: Too many arguments\n");
		}	
		printf("Usage: executable input.toy\n");			
		return 0;
	}
	else{
		strcpy(fpname,argv[1]);													//file for lectical analysis
	}

	if((fp=fopen(fpname,"r"))==NULL){
		printf("File not exists\nExiting...\n");
		exit(0);
	}
	if(fp!=NULL){
		create_transition_table();

		syntax();		/* syntax analysis of file */

			/* IN ORDER TO CHECK ONLY WHAT lex RETURNS EACH TIME RUN THIS */
			/*while(token.type!=eoftk){
				lex();
				if(token.type!=eoftk)				 		 
					printf("%d",token.type);

				if(token.type==idtk || token.type==numtk)
					printf("\t%s\n", token.strval);
				else
					print_enums(token.type);
			}*/

		printf("\nLecture and Syntax analysis completed succesfully!\n");	
	}
	fclose(fp);

	/* IN ORDER TO CHECK THE TRANSITION TABLE RUN THIS */
	/*for(i=0;i<11;i++){
		for(j=0;j<20;j++)
			if(T[i][j]>=0 &&  T[i][j]<10)
				printf("|  %d ", T[i][j]);
			else if(T[i][j]>9)
				printf("| %d ", T[i][j]);
			else if(T[i][j]==OK)
				printf("| OK ");
			else if(T[i][j]==error)
				printf("| er ");
		printf("\n");
	}*/

	exit(1);
}
